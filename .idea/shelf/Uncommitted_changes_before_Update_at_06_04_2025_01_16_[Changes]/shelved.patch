Index: firstAI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport chess\r\nimport threading\r\nimport time\r\nimport random\r\nimport os\r\n\r\npygame.init()\r\n\r\n# Screen dimensions\r\nWIDTH, HEIGHT = 560, 560\r\nBOARD_SIZE = 480\r\nSQUARE_SIZE = BOARD_SIZE // 8\r\n\r\n# Colors\r\nLIGHT_SQUARE = (220, 184, 140)  # Light brown\r\nDARK_SQUARE = (166, 109, 79)  # Dark brown\r\nHIGHLIGHT = (70, 130, 180, 128)  # Steelblue with some transparency\r\nWHITE = (255, 255, 255)\r\nBLACK = (0, 0, 0)\r\nBACKGROUND = (40, 40, 40)\r\n\r\n# Material values for simple evaluation\r\nMATERIAL_VALUES = {\r\n    chess.PAWN: 1,\r\n    chess.KNIGHT: 3,\r\n    chess.BISHOP: 3,\r\n    chess.ROOK: 5,\r\n    chess.QUEEN: 9,\r\n    chess.KING: 0  # King's value is not considered\r\n}\r\n\r\n\r\ndef evaluate_board(board):\r\n    \"\"\"material evaluation: Positive for White, negative for Black.\"\"\"\r\n    evaluation = 0\r\n    for piece_type in MATERIAL_VALUES:\r\n        evaluation += (len(board.pieces(piece_type, chess.WHITE)) - len(board.pieces(piece_type, chess.BLACK))) * \\\r\n                      MATERIAL_VALUES[piece_type]\r\n    return evaluation\r\n\r\n\r\ndef minimax(board, depth, is_maximizing):\r\n    \"\"\"Minimax algorithm without Alpha-Beta pruning.\"\"\"\r\n    if depth == 0 or board.is_game_over():\r\n        return evaluate_board(board), None\r\n\r\n    best_move = None\r\n    if is_maximizing:\r\n        max_eval = float('-inf')\r\n        for move in board.legal_moves:\r\n            board.push(move)\r\n            eval_score, _ = minimax(board, depth - 1, False)\r\n            board.pop()\r\n            if eval_score > max_eval:\r\n                max_eval = eval_score\r\n                best_move = move\r\n        return max_eval, best_move\r\n    else:\r\n        min_eval = float('inf')\r\n        for move in board.legal_moves:\r\n            board.push(move)\r\n            eval_score, _ = minimax(board, depth - 1, True)\r\n            board.pop()\r\n            if eval_score < min_eval:\r\n                min_eval = eval_score\r\n                best_move = move\r\n        return min_eval, best_move\r\n\r\n\r\nclass ChessGame:\r\n    def __init__(self):\r\n        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))\r\n        pygame.display.set_caption(\"Chess Engine with AI\")\r\n\r\n        self.board = chess.Board()\r\n        self.selected_square = None\r\n        self.ai_thinking = False\r\n        self.piece_images = self.load_piece_images()\r\n\r\n        # Offset for centering the board\r\n        self.board_offset_x = (WIDTH - BOARD_SIZE) // 2\r\n        self.board_offset_y = (HEIGHT - BOARD_SIZE) // 2\r\n\r\n        # Game state\r\n        self.game_over = False\r\n        self.message = \"\"\r\n\r\n        # Initialize the font\r\n        pygame.font.init()\r\n        self.font = pygame.font.SysFont('Arial', 20)\r\n\r\n    def load_piece_images(self):\r\n        \"\"\"Load chess piece images. If not available, draw symbols.\"\"\"\r\n        piece_images = {}\r\n        piece_chars = {\r\n            'P': '♙', 'N': '♘', 'B': '♗', 'R': '♖', 'Q': '♕', 'K': '♔',  # black\r\n            'p': '♟', 'n': '♞', 'b': '♝', 'r': '♜', 'q': '♛', 'k': '♚'  # white\r\n        }\r\n\r\n        # Using symbols as we don't have image files\r\n        font = pygame.font.SysFont('Arial', 40)\r\n        for piece, char in piece_chars.items():\r\n            color = WHITE if piece.isupper() else BLACK\r\n            text_surface = font.render(char, True, color)\r\n            piece_images[piece] = text_surface\r\n\r\n        return piece_images\r\n\r\n    def draw_board(self):\r\n        \"\"\"Draw the chess board.\"\"\"\r\n        # Draw background\r\n        self.screen.fill(BACKGROUND)\r\n\r\n        # Draw board squares\r\n        for rank in range(8):\r\n            for file in range(8):\r\n                x = file * SQUARE_SIZE + self.board_offset_x\r\n                y = rank * SQUARE_SIZE + self.board_offset_y\r\n                color = LIGHT_SQUARE if (file + rank) % 2 == 0 else DARK_SQUARE\r\n                pygame.draw.rect(self.screen, color, (x, y, SQUARE_SIZE, SQUARE_SIZE))\r\n\r\n        # Draw rank and file labels\r\n        font = pygame.font.SysFont('Arial', 16)\r\n        for i in range(8):\r\n            # Ranks (1-8)\r\n            rank_label = font.render(str(8 - i), True, WHITE)\r\n            self.screen.blit(rank_label,\r\n                             (self.board_offset_x - 20, i * SQUARE_SIZE + self.board_offset_y + SQUARE_SIZE // 2 - 8))\r\n\r\n            # Files (a-h)\r\n            file_label = font.render(chr(97 + i), True, WHITE)\r\n            self.screen.blit(file_label, (i * SQUARE_SIZE + self.board_offset_x + SQUARE_SIZE // 2 - 4,\r\n                                          self.board_offset_y + BOARD_SIZE + 10))\r\n\r\n    def draw_pieces(self):\r\n        \"\"\"Draw the chess pieces on the board.\"\"\"\r\n        for rank in range(8):\r\n            for file in range(8):\r\n                square = chess.square(file, 7 - rank)  # Flip rank for drawing\r\n                piece = self.board.piece_at(square)\r\n                if piece:\r\n                    x = file * SQUARE_SIZE + self.board_offset_x + SQUARE_SIZE // 2\r\n                    y = rank * SQUARE_SIZE + self.board_offset_y + SQUARE_SIZE // 2\r\n                    piece_img = self.piece_images[piece.symbol()]\r\n                    # Center the piece image on the square\r\n                    self.screen.blit(piece_img, (x - piece_img.get_width() // 2, y - piece_img.get_height() // 2))\r\n\r\n    def highlight_selected_square(self):\r\n        \"\"\"Highlight the selected square.\"\"\"\r\n        if self.selected_square is not None:\r\n            file = chess.square_file(self.selected_square)\r\n            rank = 7 - chess.square_rank(self.selected_square)  # Flip rank for drawing\r\n            x = file * SQUARE_SIZE + self.board_offset_x\r\n            y = rank * SQUARE_SIZE + self.board_offset_y\r\n\r\n            highlight_surface = pygame.Surface((SQUARE_SIZE, SQUARE_SIZE), pygame.SRCALPHA)\r\n            highlight_surface.fill(HIGHLIGHT)\r\n            self.screen.blit(highlight_surface, (x, y))\r\n\r\n            # Also highlight legal moves\r\n            for move in self.board.legal_moves:\r\n                if move.from_square == self.selected_square:\r\n                    target_file = chess.square_file(move.to_square)\r\n                    target_rank = 7 - chess.square_rank(move.to_square)\r\n                    target_x = target_file * SQUARE_SIZE + self.board_offset_x\r\n                    target_y = target_rank * SQUARE_SIZE + self.board_offset_y\r\n\r\n                    # Draw a circle for legal moves\r\n                    target_surface = pygame.Surface((SQUARE_SIZE, SQUARE_SIZE), pygame.SRCALPHA)\r\n                    pygame.draw.circle(target_surface, HIGHLIGHT, (SQUARE_SIZE // 2, SQUARE_SIZE // 2),\r\n                                       SQUARE_SIZE // 6)\r\n                    self.screen.blit(target_surface, (target_x, target_y))\r\n\r\n    def draw_status(self):\r\n        \"\"\"Draw game status message.\"\"\"\r\n        if self.ai_thinking:\r\n            message = \"AI is thinking...\"\r\n        elif self.game_over:\r\n            message = self.message\r\n        else:\r\n            message = \"White's turn\" if self.board.turn == chess.WHITE else \"Black's turn\"\r\n\r\n        text = self.font.render(message, True, WHITE)\r\n        self.screen.blit(text, (10, 10))\r\n\r\n    def screen_to_board_position(self, pos):\r\n        \"\"\"Convert screen position to board position.\"\"\"\r\n        x, y = pos\r\n        if (x < self.board_offset_x or x >= self.board_offset_x + BOARD_SIZE or\r\n                y < self.board_offset_y or y >= self.board_offset_y + BOARD_SIZE):\r\n            return None  # Click outside the board\r\n\r\n        file = (x - self.board_offset_x) // SQUARE_SIZE\r\n        rank = 7 - (y - self.board_offset_y) // SQUARE_SIZE  # Flip rank for calculation\r\n        return chess.square(file, rank)\r\n\r\n    def handle_click(self, pos):\r\n        \"\"\"Handle mouse click events.\"\"\"\r\n        if self.ai_thinking or self.game_over or self.board.turn == chess.BLACK:\r\n            return\r\n\r\n        square = self.screen_to_board_position(pos)\r\n        if square is None:\r\n            return\r\n\r\n        if self.selected_square is None:\r\n            # First click - selecting a piece\r\n            piece = self.board.piece_at(square)\r\n            if piece and piece.color == chess.WHITE:\r\n                self.selected_square = square\r\n        else:\r\n            # Second click - make a move\r\n            move = chess.Move(self.selected_square, square)\r\n            if move in self.board.legal_moves:\r\n                self.board.push(move)\r\n                # Check game state after the move\r\n                self.check_game_state()\r\n                if not self.game_over:\r\n                    # Start AI move in a separate thread\r\n                    self.ai_thinking = True\r\n                    threading.Thread(target=self.ai_move, daemon=True).start()\r\n            # Reset selection regardless\r\n            self.selected_square = None\r\n\r\n    def ai_move(self):\r\n        \"\"\"Calculate and make AI move.\"\"\"\r\n        try:\r\n            time.sleep(0.5)  # Short pause for better UX\r\n            _, move = minimax(self.board, depth=2, is_maximizing=False)\r\n\r\n            # If no move is found (in case of checkmate, etc.), try to find a legal move\r\n            if move is None:\r\n                legal_moves = list(self.board.legal_moves)\r\n                if legal_moves:\r\n                    move = random.choice(legal_moves)\r\n\r\n            if move:\r\n                self.board.push(move)\r\n                self.check_game_state()\r\n        finally:\r\n            self.ai_thinking = False\r\n\r\n    def check_game_state(self):\r\n        \"\"\"Check if the game is over.\"\"\"\r\n        if self.board.is_checkmate():\r\n            self.game_over = True\r\n            winner = \"White\" if self.board.turn == chess.BLACK else \"Black\"\r\n            self.message = f\"Checkmate! {winner} wins!\"\r\n        elif self.board.is_stalemate():\r\n            self.game_over = True\r\n            self.message = \"Stalemate!\"\r\n        elif self.board.is_insufficient_material():\r\n            self.game_over = True\r\n            self.message = \"Draw by insufficient material!\"\r\n        elif self.board.is_fifty_moves():\r\n            self.game_over = True\r\n            self.message = \"Draw by fifty-move rule!\"\r\n        elif self.board.is_repetition():\r\n            self.game_over = True\r\n            self.message = \"Draw by threefold repetition!\"\r\n\r\n    def run(self):\r\n        \"\"\"Main game loop.\"\"\"\r\n        running = True\r\n        clock = pygame.time.Clock()\r\n\r\n        while running:\r\n            for event in pygame.event.get():\r\n                if event.type == pygame.QUIT:\r\n                    running = False\r\n                elif event.type == pygame.MOUSEBUTTONDOWN:\r\n                    if event.button == 1:  # Left mouse button\r\n                        self.handle_click(event.pos)\r\n                elif event.type == pygame.KEYDOWN:\r\n                    if event.key == pygame.K_r:  # Reset game with 'r' key\r\n                        self.board = chess.Board()\r\n                        self.selected_square = None\r\n                        self.game_over = False\r\n                        self.message = \"\"\r\n\r\n            # Draw everything\r\n            self.draw_board()\r\n            self.highlight_selected_square()\r\n            self.draw_pieces()\r\n            self.draw_status()\r\n\r\n            pygame.display.flip()\r\n            clock.tick(30)  # 30 FPS\r\n\r\n        pygame.quit()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    game = ChessGame()\r\n    game.run()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firstAI.py b/firstAI.py
--- a/firstAI.py	(revision 79f255c31687389447cc975daed3feec17899cbb)
+++ b/firstAI.py	(date 1743894802712)
@@ -108,9 +108,7 @@
         return piece_images
 
     def draw_board(self):
-        """Draw the chess board."""
-        # Draw background
-        self.screen.fill(BACKGROUND)
+        self.screen.fill(BACKGROUND) # Draw background
 
         # Draw board squares
         for rank in range(8):
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"98265031-6f00-4155-9b48-f0b04810291f\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/Chess.iml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/modules.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2vKTRmb02HJ6NMxuYK6TpRWHStg\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-f27c65a3e318-JavaScript-PY-251.23774.211\" />\r\n        <option value=\"bundled-python-sdk-54db487c5011-d9c5bdb153f4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-251.23774.211\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"98265031-6f00-4155-9b48-f0b04810291f\" name=\"Changes\" comment=\"\" />\r\n      <created>1743892759299</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1743892759299</updated>\r\n      <workItem from=\"1743892760332\" duration=\"330000\" />\r\n      <workItem from=\"1743893407544\" duration=\"329000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Chess$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1743892789998\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 79f255c31687389447cc975daed3feec17899cbb)
+++ b/.idea/workspace.xml	(date 1743894656616)
@@ -5,22 +5,40 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="98265031-6f00-4155-9b48-f0b04810291f" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/Chess.iml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="firstTry" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
+  "lastFilter": {
+    "state": "OPEN",
+    "assignee": "Hamid-el"
+  }
+}]]></component>
+  <component name="GithubPullRequestsUISettings"><![CDATA[{
+  "selectedUrlAndAccountId": {
+    "url": "https://github.com/Hamid-el/Chess.git",
+    "accountId": "7e9200a6-8379-4ecc-88f4-07aacd3522c5"
+  }
+}]]></component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 1
 }</component>
@@ -78,7 +96,12 @@
       </map>
     </option>
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="added a first version of an AI using minimax" />
+    <option name="LAST_COMMIT_MESSAGE" value="added a first version of an AI using minimax" />
+  </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/Chess$main.coverage" NAME="main Coverage Results" MODIFIED="1743892789998" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Chess$firstAI.coverage" NAME="firstAI Coverage Results" MODIFIED="1743893933304" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
